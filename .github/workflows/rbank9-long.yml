name: Generate long-term charts (R-BANK9 1d/7d/1m/1y + stats)

on:
  workflow_dispatch:
  schedule:
    - cron: '05 1 * * *'   # 毎日 10:05 JST

permissions:
  contents: write

concurrency:
  group: long-charts-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      INDEX_KEY: rbank9
      OUT_DIR: docs/outputs

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Resolve market session (JST)
        id: resolve
        shell: bash
        run: |
          echo "market_tz=Asia/Tokyo"    >> "$GITHUB_OUTPUT"
          echo "session_start=09:00"     >> "$GITHUB_OUTPUT"
          echo "session_end=15:30"       >> "$GITHUB_OUTPUT"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        shell: bash
        run: |
          set -euo pipefail
          python -V
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install pandas numpy matplotlib
          fi

      - name: Clear pycache
        shell: bash
        run: rm -rf scripts/__pycache__ || true

      - name: Update history (if available)
        shell: bash
        run: |
          set -e
          if [ -f scripts/update_history.py ]; then
            echo "run: update_history.py"
            python scripts/update_history.py || true
          else
            echo "scripts/update_history.py not found (skip)"
          fi

      - name: List BEFORE (hashes)
        shell: bash
        run: |
          set -e
          OUT="$OUT_DIR"
          echo "== BEFORE =="
          ls -lah "$OUT" || true
          (cd "$OUT" && sha256sum rbank9_*.png 2>/dev/null || true)

      - name: Generate long-term charts
        shell: bash
        env:
          MARKET_TZ:     ${{ steps.resolve.outputs.market_tz }}
          SESSION_START: ${{ steps.resolve.outputs.session_start }}
          SESSION_END:   ${{ steps.resolve.outputs.session_end }}
        run: |
          set -e
          echo "PWD=$(pwd)"
          echo "INDEX_KEY=$INDEX_KEY  OUT_DIR=$OUT_DIR"
          echo "---- sample csv heads ----"
          for f in "$OUT_DIR"/*history.csv "$OUT_DIR"/*_1d.csv; do
            [ -f "$f" ] && { echo ">> $f"; head -n 5 "$f"; echo; }
          done
          echo "---- run long_charts.py ----"
          python scripts/long_charts.py
          echo "---- AFTER ls ----"
          ls -lah "$OUT_DIR" || true

      - name: List AFTER (hashes)
        shell: bash
        run: |
          set -e
          OUT="$OUT_DIR"
          echo "== AFTER =="
          (cd "$OUT" && sha256sum rbank9_*.png 2>/dev/null || true)

      - name: Normalize legacy filenames
        shell: bash
        run: |
          set -e
          OUTDIR="$OUT_DIR"; shopt -s nullglob
          for f in "$OUTDIR"/r_bank9_*; do
            base="$(basename "$f")"
            mv -f "$f" "$OUTDIR/${base/r_bank9_/rbank9_}"
          done

      - name: Sanity check - prefix
        shell: bash
        run: |
          set -e
          OUTDIR="$OUT_DIR"; shopt -s nullglob; err=0
          for f in "$OUTDIR"/*; do
            b="$(basename "$f")"
            case "$b" in README.md|_last_run.txt) continue;; esac
            [[ "$b" == "${INDEX_KEY}_"* ]] || { echo "X prefix mismatch: $b"; err=1; }
          done
          [ $err -eq 0 ] || exit 1
          echo "✓ Prefix check passed."

      - name: Commit charts if changed (force-add outputs dir)
        shell: bash
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global safe.directory "$(pwd)"

          # 取りこぼし防止：outputs を丸ごと stage
          git add -A "$OUT_DIR"

          echo "-- staged files --"
          git diff --name-only --cached || true

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(charts): update long charts & stats (${INDEX_KEY})"
            git push
          fi
